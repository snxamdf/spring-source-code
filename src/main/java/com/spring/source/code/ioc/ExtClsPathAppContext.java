package com.spring.source.code.ioc;import java.io.File;import java.io.FileFilter;import java.io.IOException;import java.lang.reflect.Field;import java.net.URL;import java.util.ArrayList;import java.util.Enumeration;import java.util.List;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;/** * @author * @description * @date 2020/1/10 */public class ExtClsPathAppContext {    private Map<String, Object> beans = new ConcurrentHashMap<String, Object>();    private String packageName;    public ExtClsPathAppContext() {    }    public ExtClsPathAppContext(String packageName) {        this.packageName = packageName;        this.init();    }    public Object getBean(String beanName) throws NullPointerException {        Object bean = beans.get(beanName);        if (bean == null) {            throw new NullPointerException("bean is null " + beanName);        }        return bean;    }    private void init() {        List<Class<?>> classes = new ArrayList<Class<?>>();        String packageDirName = packageName.replace('.', '/');        try {            Enumeration<URL> dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);            while (dirs.hasMoreElements()) {                URL url = dirs.nextElement();                String protocol = url.getProtocol();                if ("file".equals(protocol)) {                    this.readerClass(classes, url.getPath());                }            }            //System.out.println(classes.size());            for (Class<?> clazz : classes) {                ExtService extService = clazz.getDeclaredAnnotation(ExtService.class);                ExtRepository extRepository = clazz.getDeclaredAnnotation(ExtRepository.class);                if (extService != null || extRepository != null) {                    beans.put(this.getBeanName(clazz.getSimpleName()), clazz.newInstance());                }            }            for (Map.Entry<String, Object> me : beans.entrySet()) {                Class<?> clazz = me.getValue().getClass();                Field[] fields = clazz.getDeclaredFields();                for (Field field : fields) {                    ExtAutowired extAutowired = field.getAnnotation(ExtAutowired.class);                    if (extAutowired != null) {                        field.setAccessible(true);                        String fieldClazzBeanName = this.getBeanName(field.getType().getSimpleName());                        System.out.println(fieldClazzBeanName);                        if (clazz.isInterface()) {                            fieldClazzBeanName = fieldClazzBeanName + "Impl";                        }                        Object object = beans.get(fieldClazzBeanName);                        field.set(me.getValue(), object);                    }                }            }            System.out.println("init end");        } catch (IOException | IllegalAccessException | InstantiationException e) {            e.printStackTrace();        }    }    private String getBeanName(String name) {        name = Character.toLowerCase(name.charAt(0)) + name.substring(1);        return name;    }    private void readerClass(List<Class<?>> classes, String path) {        File dir = new File(path);        File[] files = dir.listFiles(new FileFilter() {            @Override            public boolean accept(File pathname) {                return pathname.isDirectory() || pathname.getName().endsWith(".class");            }        });        for (File file : files) {            if (file.isDirectory()) {                this.readerClass(classes, file.getPath());            } else {                String packageClassName = file.getPath().replaceAll(File.separator, ".");                int idx = packageClassName.indexOf(this.packageName);                packageClassName = packageClassName.substring(idx);                packageClassName = packageClassName.substring(0, packageClassName.length() - 6);                //System.out.println(packageClassName);                try {                    classes.add(Class.forName(packageClassName));                } catch (ClassNotFoundException e) {                    e.printStackTrace();                }            }        }    }}